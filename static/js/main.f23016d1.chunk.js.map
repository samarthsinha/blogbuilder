{"version":3,"sources":["constants.js","redux/reducers/visibilityFilter.js","redux/actionTypes.js","redux/reducers/todos.js","redux/reducers/index.js","redux/store.js","redux/actions.js","components/AddTodo.js","components/Todo.js","redux/selectors.js","components/TodoList.js","components/VisibilityFilters.js","App.js","index.js"],"names":["VISIBILITY_FILTERS","ALL","COMPLETED","INCOMPLETE","initialState","visibilityFilter","state","action","type","payload","filter","allIds","byIds","combineReducers","todos","id","content","completed","createStore","rootReducer","nextTodoId","AddTodo","props","updateInput","input","setState","handleAddTodo","addTodo","onChange","e","target","value","this","className","onClick","React","Component","connect","toggleTodo","todo","cx","getTodosState","store","getTodos","getTodoList","map","getTodoById","allTodos","getTodosByVisibilityFilter","length","index","key","activeFilter","setFilter","Object","keys","filterKey","currentFilter","TodoApp","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.f23016d1.chunk.js","sourcesContent":["export const VISIBILITY_FILTERS = {\r\n    ALL: \"all\",\r\n    COMPLETED: \"completed\",\r\n    INCOMPLETE: \"incomplete\"\r\n  };\r\n  ","import { SET_FILTER } from \"../actionTypes\";\r\nimport { VISIBILITY_FILTERS } from \"../../constants\";\r\n\r\nconst initialState = VISIBILITY_FILTERS.ALL;\r\n\r\nconst visibilityFilter = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_FILTER: {\r\n      return action.payload.filter;\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default visibilityFilter;\r\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\nexport const SET_FILTER = \"SET_FILTER\";\r\n","import { ADD_TODO, TOGGLE_TODO } from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  allIds: [],\r\n  byIds: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TODO: {\r\n      const { id, content } = action.payload;\r\n      return {\r\n        ...state,\r\n        allIds: [...state.allIds, id],\r\n        byIds: {\r\n          ...state.byIds,\r\n          [id]: {\r\n            content,\r\n            completed: false\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case TOGGLE_TODO: {\r\n      const { id } = action.payload;\r\n      return {\r\n        ...state,\r\n        byIds: {\r\n          ...state.byIds,\r\n          [id]: {\r\n            ...state.byIds[id],\r\n            completed: !state.byIds[id].completed\r\n          }\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport visibilityFilter from \"./visibilityFilter\";\r\nimport todos from \"./todos\";\r\n\r\nexport default combineReducers({ todos, visibilityFilter });\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default createStore(rootReducer);\r\n","import { ADD_TODO, TOGGLE_TODO, SET_FILTER } from \"./actionTypes\";\r\n\r\nlet nextTodoId = 0;\r\n\r\nexport const addTodo = content => ({\r\n  type: ADD_TODO,\r\n  payload: {\r\n    id: ++nextTodoId,\r\n    content\r\n  }\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n  type: TOGGLE_TODO,\r\n  payload: { id }\r\n});\r\n\r\nexport const setFilter = filter => ({ type: SET_FILTER, payload: { filter } });\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addTodo } from \"../redux/actions\";\r\n\r\nclass AddTodo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { input: \"\" };\r\n  }\r\n\r\n  updateInput = input => {\r\n    this.setState({ input });\r\n  };\r\n\r\n  handleAddTodo = () => {\r\n    this.props.addTodo(this.state.input);\r\n    this.setState({ input: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          onChange={e => this.updateInput(e.target.value)}\r\n          value={this.state.input}\r\n        />\r\n        <button className=\"add-todo\" onClick={this.handleAddTodo}>\r\n          Add Todo\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { addTodo }\r\n)(AddTodo);\r\n// export default AddTodo;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport cx from \"classnames\";\r\nimport { toggleTodo } from \"../redux/actions\";\r\n\r\nconst Todo = ({ todo, toggleTodo }) => (\r\n  <li className=\"todo-item\" onClick={() => toggleTodo(todo.id)}>\r\n    {todo && todo.completed ? \"ðŸ‘Œ\" : \"ðŸ‘‹\"}{\" \"}\r\n    <span\r\n      className={cx(\r\n        \"todo-item__text\",\r\n        todo && todo.completed && \"todo-item__text--completed\"\r\n      )}\r\n    >\r\n      {todo.content}\r\n    </span>\r\n  </li>\r\n);\r\n\r\n// export default Todo;\r\nexport default connect(\r\n  null,\r\n  { toggleTodo }\r\n)(Todo);\r\n","import { VISIBILITY_FILTERS } from \"../constants\";\r\n\r\nexport const getTodosState = store => store.todos;\r\n\r\nexport const getTodoList = store =>\r\n  getTodosState(store) ? getTodosState(store).allIds : [];\r\n\r\nexport const getTodoById = (store, id) =>\r\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {};\r\n\r\n/**\r\n * example of a slightly more complex selector\r\n * select from store combining information from multiple reducers\r\n */\r\nexport const getTodos = store =>\r\n  getTodoList(store).map(id => getTodoById(store, id));\r\n\r\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\r\n  const allTodos = getTodos(store);\r\n  switch (visibilityFilter) {\r\n    case VISIBILITY_FILTERS.COMPLETED:\r\n      return allTodos.filter(todo => todo.completed);\r\n    case VISIBILITY_FILTERS.INCOMPLETE:\r\n      return allTodos.filter(todo => !todo.completed);\r\n    case VISIBILITY_FILTERS.ALL:\r\n    default:\r\n      return allTodos;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Todo from \"./Todo\";\r\n// import { getTodos } from \"../redux/selectors\";\r\nimport { getTodosByVisibilityFilter } from \"../redux/selectors\";\r\nimport { VISIBILITY_FILTERS } from \"../constants\";\r\n\r\nconst TodoList = ({ todos }) => (\r\n  <ul className=\"todo-list\">\r\n    {todos && todos.length\r\n      ? todos.map((todo, index) => {\r\n          return <Todo key={`todo-${todo.id}`} todo={todo} />;\r\n        })\r\n      : \"No todos, yay!\"}\r\n  </ul>\r\n);\r\n\r\n// const mapStateToProps = state => {\r\n//   const { byIds, allIds } = state.todos || {};\r\n//   const todos =\r\n//     allIds && state.todos.allIds.length\r\n//       ? allIds.map(id => (byIds ? { ...byIds[id], id } : null))\r\n//       : null;\r\n//   return { todos };\r\n// };\r\n\r\nconst mapStateToProps = state => {\r\n  const { visibilityFilter } = state;\r\n  const todos = getTodosByVisibilityFilter(state, visibilityFilter);\r\n  return { todos };\r\n  //   const allTodos = getTodos(state);\r\n  //   return {\r\n  //     todos:\r\n  //       visibilityFilter === VISIBILITY_FILTERS.ALL\r\n  //         ? allTodos\r\n  //         : visibilityFilter === VISIBILITY_FILTERS.COMPLETED\r\n  //           ? allTodos.filter(todo => todo.completed)\r\n  //           : allTodos.filter(todo => !todo.completed)\r\n  //   };\r\n};\r\n// export default TodoList;\r\nexport default connect(mapStateToProps)(TodoList);\r\n","import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport { connect } from \"react-redux\";\r\nimport { setFilter } from \"../redux/actions\";\r\nimport { VISIBILITY_FILTERS } from \"../constants\";\r\n\r\nconst VisibilityFilters = ({ activeFilter, setFilter }) => {\r\n  return (\r\n    <div className=\"visibility-filters\">\r\n      {Object.keys(VISIBILITY_FILTERS).map(filterKey => {\r\n        const currentFilter = VISIBILITY_FILTERS[filterKey];\r\n        return (\r\n          <span\r\n            key={`visibility-filter-${currentFilter}`}\r\n            className={cx(\r\n              \"filter\",\r\n              currentFilter === activeFilter && \"filter--active\"\r\n            )}\r\n            onClick={() => {\r\n              setFilter(currentFilter);\r\n            }}\r\n          >\r\n            {currentFilter}\r\n          </span>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { activeFilter: state.visibilityFilter };\r\n};\r\n// export default VisibilityFilters;\r\nexport default connect(\r\n  mapStateToProps,\r\n  { setFilter }\r\n)(VisibilityFilters);\r\n","import React from \"react\";\nimport AddTodo from \"./components/AddTodo\";\nimport TodoList from \"./components/TodoList\";\nimport VisibilityFilters from \"./components/VisibilityFilters\";\nimport \"./App.css\";\n\nexport default function TodoApp() {\n  return (\n    <div className=\"todo-app\">\n      <h1>Todo List</h1>\n      <AddTodo />\n      <TodoList />\n      <VisibilityFilters />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nimport TodoApp from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}